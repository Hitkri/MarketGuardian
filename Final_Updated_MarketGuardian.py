import os
import logging
import time
import uuid
import sqlite3
import ccxt
import random
import openai
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = "7635928627:AAFiDfGdfZKoReNnGDXkjaDm4Q3qm4AH0t0"
OPENAI_API_KEY = "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"
openai.api_key = OPENAI_API_KEY

BUDGET_FUTURES = 500
BUDGET_SPOT = 3000

FUTURES_PAIRS = [
    "BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT", "XRP/USDT",
    "ADA/USDT", "DOGE/USDT", "LINK/USDT", "AVAX/USDT", "MATIC/USDT",
    "SHIB/USDT", "DOT/USDT", "OP/USDT", "TON/USDT", "ARB/USDT",
    "SEI/USDT", "SUI/USDT", "LTC/USDT", "BCH/USDT", "INJ/USDT"
]
SPOT_PAIRS = FUTURES_PAIRS.copy()
ADMIN_ID = 1407143951

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ë–î –î–õ–Ø –¢–û–ö–ï–ù–û–í ===
conn = sqlite3.connect("access_tokens.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS tokens (
    token TEXT PRIMARY KEY,
    user_id INTEGER UNIQUE,
    username TEXT,
    activation_time TIMESTAMP
)
""")
conn.commit()

# === EXCHANGE INIT ===
binance = ccxt.binance({
    "enableRateLimit": True,
    "options": {"defaultType": "future"}
})

# === ACCESS ===
def user_has_access(user_id):
    cursor.execute("SELECT user_id FROM tokens WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

async def generate_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    token = str(uuid.uuid4())
    cursor.execute("INSERT INTO tokens (token) VALUES (?)", (token,))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {token}")

async def activate_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    username = update.message.chat.username
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /activate <—Ç–æ–∫–µ–Ω>")
        return
    token = context.args[0]
    cursor.execute("SELECT token FROM tokens WHERE token = ? AND user_id IS NULL", (token,))
    if cursor.fetchone():
        activation_time = time.time()
        cursor.execute("UPDATE tokens SET user_id = ?, username = ?, activation_time = ? WHERE token = ?", (user_id, username, activation_time, token))
        conn.commit()
        await update.message.reply_text("‚úÖ –¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await main_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.")

# === –ú–ï–ù–Æ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_has_access(user_id):
        await main_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /activate <—Ç–æ–∫–µ–Ω>.")

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üü¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –°–ü–û–¢", callback_data="spot_recommend")],
        [InlineKeyboardButton("üíé 20 –ø–∞—Ä –Ω–∞ –§–¨–Æ–ß–ï–†–°–ê–•", callback_data="futures_manual")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("<b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:</b>", reply_markup=reply_markup, parse_mode="HTML")
    elif update.callback_query:
        await update.callback_query.edit_message_text("<b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:</b>", reply_markup=reply_markup, parse_mode="HTML")

# === CALLBACK ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.message.chat.id

    if data == "spot_recommend":
        await send_spot_signal(user_id, context)
    elif data == "futures_manual":
        await choose_futures_pair(user_id, query)
    elif data.startswith("futures_pair_"):
        pair = data.split("futures_pair_")[1]
        await send_futures_signal(user_id, pair, context)
    elif data.startswith("monitor_"):
        pair = data.split("monitor_")[1]
        await monitor_signal(user_id, pair, context)
    elif data == "main_menu":
        await main_menu(update, context)

async def choose_futures_pair(user_id, query):
    keyboard = []
    for i in range(0, len(FUTURES_PAIRS), 2):
        row = []
        for j in range(2):
            if i + j < len(FUTURES_PAIRS):
                pair = FUTURES_PAIRS[i + j]
                row.append(InlineKeyboardButton(pair, callback_data=f"futures_pair_{pair}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
    markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞:", reply_markup=markup)

# === SPOT SIGNAL ===
async def send_spot_signal(user_id, context):
    pair = random.choice(SPOT_PAIRS)
    signal = analyze_pair(pair, budget=BUDGET_SPOT, mode="spot")
    comment = get_ai_comment(pair, signal)
    msg = make_signal_message(signal, pair, "–°–ü–û–¢", comment)
    keyboard = [
        [InlineKeyboardButton("üîç –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–¥–µ–ª–∫–æ–π", callback_data=f"monitor_{pair}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await context.bot.send_message(chat_id=user_id, text=msg, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# === FUTURES SIGNAL ===
async def send_futures_signal(user_id, pair, context):
    signal = analyze_pair(pair, budget=BUDGET_FUTURES, mode="futures")
    comment = get_ai_comment(pair, signal)
    msg = make_signal_message(signal, pair, "–§–¨–Æ–ß–ï–†–°–´", comment)
    keyboard = [
        [InlineKeyboardButton("üîç –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–¥–µ–ª–∫–æ–π", callback_data=f"monitor_{pair}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await context.bot.send_message(chat_id=user_id, text=msg, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# === MONITOR SIGNAL ===
async def monitor_signal(user_id, pair, context):
    signal = analyze_pair(pair, budget=BUDGET_SPOT, mode="spot")
    status = ""
    if not signal["signal"]:
        status = "üí§ –ü–æ–∫–∞ –ª—É—á—à–µ –≤–Ω–µ –ø–æ–∑–∏—Ü–∏–∏."
    elif signal["direction"] == "LONG" and signal.get("rsi", 50) > 70:
        status = "‚ö†Ô∏è –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –º–æ–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏."
    elif signal["direction"] == "SHORT" and signal.get("rsi", 50) < 30:
        status = "‚ö†Ô∏è –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –º–æ–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å."
    elif abs(signal["price"] - signal["take"]) < signal.get("atr", 0.5):
        status = "üéØ –¶–µ–ª—å —Ä—è–¥–æ–º! –ú–æ–∂–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å."
    elif abs(signal["price"] - signal["stop"]) < signal.get("atr", 0.5):
        status = "‚ùó –ë–ª–∏–∑–∫–æ –∫ —Å—Ç–æ–ø—É! –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω."
    else:
        status = "üëå –í—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –¥–µ—Ä–∂–∏ –ø–æ–∑–∏—Ü–∏—é."
    text = f"<b>{pair}</b>: {status}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{signal['price']}</b>"
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"monitor_{pair}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await context.bot.send_message(chat_id=user_id, text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# === –°–ò–ì–ù–ê–õ-–ì–ï–ù–ï–†–ê–¢–û–† ===
def analyze_pair(pair, budget, mode="futures"):
    try:
        ticker = binance.fetch_ticker(pair)
        price = float(ticker["last"])
        spread = abs(price - float(ticker["open"]))
        if mode == "futures":
            leverage = 5 if "BTC" in pair or "ETH" in pair else 10
            direction = "LONG" if spread > 0 else "SHORT"
            stop = round(price * (0.96 if direction == "LONG" else 1.04), 3)
            take = round(price * (1.03 if direction == "LONG" else 0.97), 3)
        else:
            leverage = 1
            direction = "BUY"
            stop = round(price * 0.98, 3)
            take = round(price * 1.01, 3)
        quality = min(10, max(0, (spread / price) * 120))
        return {
            "price": price, "direction": direction, "stop": stop,
            "take": take, "leverage": leverage, "quality": quality,
            "budget": budget, "signal": True
        }
    except Exception:
        return {
            "price": 0, "direction": "NONE", "stop": 0, "take": 0, "leverage": 1, "quality": 0, "budget": budget, "signal": False
        }

# === AI-–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô ===
def get_ai_comment(pair, signal):
    prompt = f"""
–¢—ã —Ç—Ä–µ–π–¥–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair} –Ω–∞ {signal['direction']}:
- –¶–µ–Ω–∞: {signal['price']}
- –ü–ª–µ—á–æ: {signal['leverage']}
- –°—Ç–æ–ø: {signal['stop']}
- –¢–µ–π–∫: {signal['take']}
- –ö–∞—á–µ—Å—Ç–≤–æ: {signal['quality']}
- –ë—é–¥–∂–µ—Ç: {signal['budget']}
–ù–∞–ø–∏—à–∏, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º –∏–ª–∏ –ø–ª–æ—Ö–∏–º, —É–∫–∞–∂–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –æ—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞.
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä."}, {"role": "user", "content": prompt}],
            max_tokens=90,
            temperature=0.5
        )
        return response.choices[0].message["content"]
    except Exception:
        return "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

# === –§–û–†–ú–ê–¢ –°–ò–ì–ù–ê–õ–ê ===
def make_signal_message(signal, pair, typ, comment):
    return (f"<b>‚ö° {typ} ({pair})</b>\n"
            f"–ü–ª–µ—á–æ: <b>{signal['leverage']}</b>\n"
            f"–í—Ö–æ–¥: <b>{signal['price']}</b>\n"
            f"–¢–µ–π–∫: <b>{signal['take']}</b> | –°—Ç–æ–ø: <b>{signal['stop']}</b>\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{signal['direction']}</b>\n"
            f"–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: <b>{signal['quality']:.1f}/10</b>\n"
            f"<i>{comment}</i>")

# === MAIN ===
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("generate_token", generate_token))
    app.add_handler(CommandHandler("activate", activate_token))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
