import os
import logging
import time
import uuid
import sqlite3
import asyncio
import requests
import pandas as pd
import numpy as np
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from io import BytesIO
import ccxt

# === API KEYS ===
TELEGRAM_BOT_TOKEN = '7635928627:AAFiDfGdfZKoReNnGDXkjaDm4Q3qm4AH0t0'
ADMIN_ID = int(os.getenv('ADMIN_ID', '1407143951'))

# === LOGGING ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('trading_assistant')

# === DATABASE ===
conn = sqlite3.connect('trading_bot.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('CREATE TABLE IF NOT EXISTS tokens (token TEXT PRIMARY KEY, user_id INTEGER UNIQUE, username TEXT, activation_time REAL)')
cursor.execute('CREATE TABLE IF NOT EXISTS trades (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp REAL, user_id INTEGER, symbol TEXT, side TEXT, entry REAL, active INTEGER DEFAULT 1, profit REAL DEFAULT 0.0)')
conn.commit()

# === STATE ===
active_positions = {}

# === TELEGRAM ===
scheduler = AsyncIOScheduler()
scheduler.start()

# === BINANCE ===
binance = ccxt.binance()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏ /menu')

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pairs = ['TONUSDT', 'BTCUSDT', 'ETHUSDT', 'XRPUSDT', 'BNBUSDT', 'SOLUSDT']
    buttons = [[InlineKeyboardButton(p, callback_data=f'select_{p}')] for p in pairs]
    buttons.append([InlineKeyboardButton('üìÖ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º', callback_data='report')])
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', reply_markup=markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    uid = update.effective_chat.id

    if data.startswith('select_'):
        symbol = data.replace('select_', '')
        await context.bot.send_message(uid, f'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...')
        entry_price = await fetch_binance_price(symbol)
        active_positions[uid] = {'symbol': symbol, 'entry': entry_price, 'side': 'LONG'}
        cursor.execute('INSERT INTO trades (timestamp, user_id, symbol, side, entry) VALUES (?, ?, ?, ?, ?)',
                       (time.time(), uid, symbol, 'LONG', entry_price))
        conn.commit()

        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—Ö–æ–¥", callback_data='enter')],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data='close')]
        ])
        await context.bot.send_message(chat_id=uid,
            text=f'üìà –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é {symbol} (LONG) –ø–æ {entry_price}\nüéØ Take Profit: {round(entry_price * 1.01, 4)}\nüõë Stop Loss: {round(entry_price * 0.99, 4)}',
            reply_markup=kb)
        await update.callback_query.answer()

    elif data == 'enter':
        scheduler.add_job(monitor_price, 'interval', seconds=30, id=f'monitor_{uid}', replace_existing=True, args=[context, uid])
        await context.bot.send_message(uid, 'üü¢ –°–¥–µ–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–ª–µ–∂—É –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º.')
        await update.callback_query.answer()

    elif data == 'close':
        try:
            scheduler.remove_job(f'monitor_{uid}')
        except:
            pass
        cursor.execute('UPDATE trades SET active=0 WHERE user_id=?', (uid,))
        conn.commit()
        active_positions.pop(uid, None)
        await context.bot.send_message(uid, 'üíº –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ù–∞–ø–∏—à–∏ +10 –∏–ª–∏ -5 ‚Äî —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª/–ø–æ—Ç–µ—Ä—è–ª?')
        await update.callback_query.answer()

    elif data == 'report':
        report = generate_report(uid)
        await context.bot.send_message(uid, report)
        await update.callback_query.answer()

async def monitor_price(context, uid):
    if uid not in active_positions:
        return
    pos = active_positions[uid]
    symbol = pos['symbol']
    entry = pos['entry']
    now_price = await fetch_binance_price(symbol)
    delta = now_price - entry
    status = f"üìä {symbol} ({pos['side']})\n–í—Ö–æ–¥: {entry} | –°–µ–π—á–∞—Å: {now_price}\n"

    if abs(delta) < 0.002:
        status += "‚è≥ –î–≤–∏–∂–µ–Ω–∏–µ —Å–ª–∞–±–æ–µ. –ù–∞–±–ª—é–¥–∞–µ–º."
    elif delta > 0.01:
        status += "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç. –î–µ—Ä–∂–∏–º!"
    elif delta < -0.01:
        status += "‚ö†Ô∏è –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç. –í–æ–∑–º–æ–∂–µ–Ω –≤—ã—Ö–æ–¥."
    else:
        status += "üìà –ü–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞. –í—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ."

    await context.bot.send_message(uid, status)

async def fetch_binance_price(symbol):
    try:
        price = binance.fetch_ticker(symbol)['last']
        return round(price, 4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã Binance: {e}")
        return 0.0

def generate_report(uid):
    cursor.execute('SELECT timestamp, profit FROM trades WHERE user_id=? AND profit != 0', (uid,))
    rows = cursor.fetchall()
    if not rows:
        return '‚õîÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º.'

    from collections import defaultdict
    day_map = defaultdict(list)
    for t, p in rows:
        d = datetime.fromtimestamp(t).day
        day_map[d].append(p)

    text = 'üìÖ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º:\n'
    monthly_total = 0
    for day in sorted(day_map):
        total = sum(day_map[day])
        monthly_total += total
        count = len(day_map[day])
        text += f'‚Ä¢ {day} —á–∏—Å–ª–æ: {total:+.2f} USD ({count} —Å–¥–µ–ª–æ–∫)\n'
    text += f'üìà –í—Å–µ–≥–æ –∑–∞ –º–µ—Å—è—Ü: {monthly_total:+.2f} USD'
    return text

async def profit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_chat.id
    msg = update.message.text.strip()
    if msg.startswith('+') or msg.startswith('-'):
        try:
            profit = float(msg)
            cursor.execute('UPDATE trades SET profit=? WHERE user_id=? AND active=0 ORDER BY timestamp DESC LIMIT 1', (profit, uid))
            conn.commit()
            await update.message.reply_text(f'üíæ –ó–∞–ø–∏—Å–∞–Ω–æ: {profit:+.2f} USD')
        except:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞.')

async def generate_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return await update.message.reply_text('Forbidden')
    token = str(uuid.uuid4())
    cursor.execute('INSERT INTO tokens(token) VALUES(?)', (token,))
    conn.commit()
    await update.message.reply_text(f'Token: {token}')

def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('menu', menu))
    app.add_handler(CommandHandler('generate_token', generate_token))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, profit_input))
    app.run_polling()

if __name__ == '__main__':
    main()
