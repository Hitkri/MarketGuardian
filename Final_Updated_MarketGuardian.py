import os
import logging
import time
import uuid
import sqlite3
import random
from datetime import datetime, timedelta

import ccxt
import requests
import pandas as pd
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, JobQueue
)

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω
TELEGRAM_BOT_TOKEN = "7635928627:AAFiDfGdfZKoReNnGDXkjaDm4Q3qm4AH0t0"

# API-–∫–ª—é—á–∏ (–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–∏, –Ω–µ –∑–∞–±—É–¥—å —Å–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏!)
api_keys = {
    "Binance": {
        "api_key": "7Jr5VPDXj22dQak9tUlJYFyM4v58hP7VarHBQoJPgfLn7qV4rJgzuyNCP8cBHqZx",
        "api_secret": "mc4htJRKnEJPAKMXERsv9l0S1w4MbLAuO8UjVUzMv3DPYY8nz5LAJ4K98CkGhuvu",
    }
}

# –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
CRYPTO_PANIC_TOKEN = "aa2530c4353491b07bc491ec791fa2f78baa60c7"
COINGECKO_URL = "https://api.coingecko.com/api/v3/simple/price"
COINMARKETCAL_TOKEN = "n7JjBHcraf566zaQb7Dtq9AHMQqt7kWM5z0FCeWY"

# –ê–¥–º–∏–Ω TG id
ADMIN_ID = 1407143951

# –ü–∞—Ä—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–¢–û–ü 20 –ø–æ –æ–±—ä—ë–º—É/–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤)
FUTURES_PAIRS = [
    "BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "XRP/USDT", "ADA/USDT", "DOGE/USDT",
    "LTC/USDT", "AVAX/USDT", "LINK/USDT", "MATIC/USDT", "DOT/USDT", "BCH/USDT", "OP/USDT",
    "FIL/USDT", "TON/USDT", "WIF/USDT", "PEPE/USDT", "1000SATS/USDT", "SEI/USDT"
]

# –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
FUTURES_LEVERAGE = 10
SPOT_AMOUNT = 300

# =================== –õ–û–ì–ò ===================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ================== –ë–ê–ó–ê ====================
conn = sqlite3.connect("access_tokens.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS tokens (
    token TEXT PRIMARY KEY,
    user_id INTEGER UNIQUE,
    username TEXT,
    activation_time TIMESTAMP
)
""")
conn.commit()

# =============== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ò–†–ñ–ï ===============
exchanges = {
    "Binance": ccxt.binance({
        "apiKey": api_keys["Binance"]["api_key"],
        "secret": api_keys["Binance"]["api_secret"],
        "enableRateLimit": True,
        "options": {"defaultType": "future"}
    }),
}

spot_exchange = ccxt.binance({
    "apiKey": api_keys["Binance"]["api_key"],
    "secret": api_keys["Binance"]["api_secret"],
    "enableRateLimit": True,
})

# ================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï =================
def user_has_access(user_id):
    cursor.execute("SELECT user_id FROM tokens WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

def get_volatility(ticker):
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: (high - low) / open
    try:
        high = ticker['high']
        low = ticker['low']
        open_ = ticker['open']
        if open_ == 0: return 0
        return (high - low) / open_
    except: return 0

def fetch_news():
    # CryptoPanic (–∫—Ä–∞—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä—ã–Ω–∫—É)
    try:
        r = requests.get(
            f"https://cryptopanic.com/api/v1/posts/?auth_token={CRYPTO_PANIC_TOKEN}&currencies=BTC,ETH,BNB,SOL&filter=hot"
        )
        news = r.json().get("results", [])
        return [f"üì∞ {n['title']}" for n in news[:2]]
    except Exception as e:
        logger.error(f"News error: {e}")
        return []

# ================== –ö–û–ú–ê–ù–î–´ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_has_access(user_id):
        await send_main_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")

async def send_main_menu(update, context):
    keyboard = [
        [InlineKeyboardButton("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–ø–æ—Ç", callback_data="menu:spot")],
        [InlineKeyboardButton("‚ö°Ô∏è –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–∞—Ä—ã (—Ñ—å—é—á–µ—Ä—Å—ã)", callback_data="menu:manual_futures")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤—Ö–æ–¥–∞ (—Ñ—å—é—á–µ—Ä—Å—ã)", callback_data="menu:auto_futures")],
        [InlineKeyboardButton("üóÇ –ü–æ—Ä—Ç—Ñ–µ–ª—å/–æ—Ç—á—ë—Ç", callback_data="menu:portfolio")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "<b>MarketGuardian</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n"
        "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–ø–æ—Ç\n"
        "‚ö°Ô∏è –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–∞—Ä—ã (—Ñ—å—é—á–µ—Ä—Å—ã)\n"
        "ü§ñ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤—Ö–æ–¥–∞ (—Ñ—å—é—á–µ—Ä—Å—ã)\n"
        "üóÇ –ü–æ—Ä—Ç—Ñ–µ–ª—å/–æ—Ç—á—ë—Ç\n"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="HTML")

async def generate_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.")
        return
    token = str(uuid.uuid4())
    cursor.execute("INSERT INTO tokens (token) VALUES (?)", (token,))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {token}")

async def activate_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    username = update.message.chat.username
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /activate <—Ç–æ–∫–µ–Ω>")
        return
    token = context.args[0]
    cursor.execute("SELECT token FROM tokens WHERE token = ? AND user_id IS NULL", (token,))
    if cursor.fetchone():
        activation_time = time.time()
        cursor.execute(
            "UPDATE tokens SET user_id = ?, username = ?, activation_time = ? WHERE token = ?",
            (user_id, username, activation_time, token)
        )
        conn.commit()
        await update.message.reply_text("‚úÖ –¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        await send_main_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.split(":")
    logger.info(f"Button pressed: {data}")

    if data[0] == "menu":
        if data[1] == "spot":
            await spot_signal_handler(update, context)
        elif data[1] == "manual_futures":
            await manual_futures_menu(update, context)
        elif data[1] == "auto_futures":
            await auto_futures_handler(update, context)
        elif data[1] == "portfolio":
            await portfolio_handler(update, context)
    elif data[0] == "select_futures":
        await send_manual_futures_signal(update, context, data[1])
    elif data[0] == "back":
        await send_main_menu(update, context)

# =============== –°–ü–û–¢ –°–ò–ì–ù–ê–õ–´ ================
async def spot_signal_handler(update, context):
    await update.callback_query.edit_message_text(
        "‚è≥ –ò—â–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å–ø–æ—Ç–µ (Binance)..."
    )
    pairs = spot_exchange.load_markets()
    spot_pairs = [s for s in pairs if "/USDT" in s and not pairs[s]['future'] and pairs[s]['active'] and pairs[s]['quote'] == "USDT"]
    spot_pairs = sorted(spot_pairs, key=lambda x: -pairs[x]['info'].get('quoteVolume', 0))[:20]
    best_signal = None
    best_score = -999
    for pair in spot_pairs:
        try:
            ticker = spot_exchange.fetch_ticker(pair)
            price = ticker['last']
            vol = get_volatility(ticker)
            change = ticker.get('percentage', 0)
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: –¥–≤–∏–∂–µ–Ω–∏–µ, –æ–±—ä—ë–º, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞
            score = change * vol * ticker['quoteVolume']
            if score > best_score:
                best_score = score
                best_signal = {
                    "pair": pair,
                    "price": price,
                    "change": change,
                    "vol": vol,
                    "score": score,
                }
        except Exception as e:
            continue

    if best_signal:
        news = fetch_news()
        text = (
            f"üìä <b>–°–∏–≥–Ω–∞–ª –Ω–∞ —Å–ø–æ—Ç (Binance)</b>\n"
            f"–ü–∞—Ä–∞: <b>{best_signal['pair']}</b>\n"
            f"–¶–µ–Ω–∞: <b>{best_signal['price']}</b>\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: <b>{round(best_signal['change'],2)}%</b>\n"
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: <b>{round(best_signal['vol'],4)}</b>\n"
            f"–û–±—ä—ë–º: <b>{round(best_score,2)}</b>\n"
            f"{''.join(news)}\n\n"
            f"üí° <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> –ü–∞—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å. –û–±—ä—ë–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –í–æ–∑–º–æ–∂–Ω–∞ –±—ã—Å—Ç—Ä–∞—è —Å–¥–µ–ª–∫–∞."
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back:menu")]]
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await update.callback_query.edit_message_text(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–æ–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Å–ø–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back:menu")]])
        )

# =============== –§–¨–Æ–ß–ï–†–°–´ –†–£–ß–ù–û ================
async def manual_futures_menu(update, context):
    keyboard = []
    for pair in FUTURES_PAIRS:
        keyboard.append([InlineKeyboardButton(pair, callback_data=f"select_futures:{pair}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back:menu")])
    await update.callback_query.edit_message_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—å—é—á–µ—Ä—Å–Ω—É—é –ø–∞—Ä—É:</b>", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML"
    )

async def send_manual_futures_signal(update, context, pair):
    await update.callback_query.edit_message_text(
        f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {pair}..."
    )
    try:
        exchange = exchanges["Binance"]
        ticker = exchange.fetch_ticker(pair)
        price = ticker['last']
        vol = get_volatility(ticker)
        change = ticker.get('percentage', 0)
        direction = "LONG" if change > 0 else "SHORT"
        stop_loss = round(price * (0.98 if direction == "LONG" else 1.02), 4)
        take_profit = round(price * (1.03 if direction == "LONG" else 0.97), 4)
        news = fetch_news()
        text = (
            f"‚ö°Ô∏è <b>–°–∏–≥–Ω–∞–ª –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º (Binance)</b>\n"
            f"–ü–∞—Ä–∞: <b>{pair}</b>\n"
            f"–ü–ª–µ—á–æ: <b>{FUTURES_LEVERAGE}x</b>\n"
            f"–í—Ö–æ–¥: <b>{price}</b>\n"
            f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: <b>{take_profit}</b>\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: <b>{stop_loss}</b>\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction}</b>\n"
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: <b>{round(vol,4)}</b>\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{round(change,2)}%</b>\n"
            f"{''.join(news)}\n\n"
            f"üí° <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> –ü–∞—Ä–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ —Å—É—Ç–∫–∏. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–≤–∏–∂–µ–Ω–∏—è: {direction}."
        )
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {pair}: {e}"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back:menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

# =============== –ê–í–¢–û–ü–û–ò–°–ö –§–¨–Æ–ß–ï–†–°–´ ================
async def auto_futures_handler(update, context):
    await update.callback_query.edit_message_text(
        "‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö –ø–∞—Ä –ø–æ Binance..."
    )
    # –í–æ–∑—å–º—ë–º —Ç–æ–ø-30 USDT-–ø–∞—Ä —Ñ—å—é—á–µ—Ä—Å–æ–≤
    pairs = exchanges["Binance"].load_markets()
    fut_pairs = [p for p in pairs if "/USDT" in p and pairs[p]['future'] and pairs[p]['active'] and pairs[p]['quote'] == "USDT"]
    best_signal = None
    best_score = -999
    for pair in fut_pairs:
        try:
            ticker = exchanges["Binance"].fetch_ticker(pair)
            vol = get_volatility(ticker)
            price = ticker['last']
            change = ticker.get('percentage', 0)
            score = abs(change) * vol * ticker['quoteVolume']
            if score > best_score:
                best_score = score
                best_signal = {
                    "pair": pair,
                    "price": price,
                    "change": change,
                    "vol": vol,
                    "score": score,
                }
        except Exception as e:
            continue

    if best_signal:
        direction = "LONG" if best_signal["change"] > 0 else "SHORT"
        stop_loss = round(best_signal["price"] * (0.98 if direction == "LONG" else 1.02), 4)
        take_profit = round(best_signal["price"] * (1.03 if direction == "LONG" else 0.97), 4)
        news = fetch_news()
        text = (
            f"ü§ñ <b>–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª (Binance –§—å—é—á–µ—Ä—Å—ã)</b>\n"
            f"–ü–∞—Ä–∞: <b>{best_signal['pair']}</b>\n"
            f"–ü–ª–µ—á–æ: <b>{FUTURES_LEVERAGE}x</b>\n"
            f"–í—Ö–æ–¥: <b>{best_signal['price']}</b>\n"
            f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: <b>{take_profit}</b>\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: <b>{stop_loss}</b>\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction}</b>\n"
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: <b>{round(best_signal['vol'],4)}</b>\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{round(best_signal['change'],2)}%</b>\n"
            f"{''.join(news)}\n\n"
            f"üí° <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> –ü–æ–¥–±–æ—Ä–∫–∞ –ø–æ –æ–±—ä—ë–º—É, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥—É —Ä—ã–Ω–∫–∞. –≠—Ç–æ —Ç–æ–ø-1 –ø–∞—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back:menu")]]
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await update.callback_query.edit_message_text(
            "–ù–µ—Ç —è—Ä–∫–∏—Ö –≤—Ö–æ–¥–æ–≤ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back:menu")]])
        )

# =============== –ü–û–†–¢–§–ï–õ–¨/–û–¢–ß–Å–¢ ================
async def portfolio_handler(update, context):
    user_id = update.callback_query.message.chat_id
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —Ç—É—Ç –º–æ–∂–Ω–æ –≤—ã—Ç—è–Ω—É—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –¥–ª—è —ç—Ç–æ–≥–æ user_id
    text = (
        "üóÇ <b>–í–∞—à –æ—Ç—á—ë—Ç:</b>\n"
        "- –°–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: <b>100+</b>\n"
        "- –õ—É—á—à–∏–π PnL: <b>+37.5%</b>\n"
        "- –°—Ä–µ–¥–Ω–∏–π PnL: <b>+4.2%</b>\n"
        "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ç–µ–π–∫ —á–∞—Å—Ç—è–º–∏, —Å—Ç–æ–ø —Å—Ç—Ä–æ–≥–æ!\n\n"
        "<i>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫ –∏ –∞–≤—Ç–æ-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫!</i>"
    )
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back:menu")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

# ============= –ê–í–¢–û–°–ò–ì–ù–ê–õ–´ –†–ê–ó –í –ß–ê–° ==============
async def hourly_signals_job(context: ContextTypes.DEFAULT_TYPE):
    chat_ids = []
    cursor.execute("SELECT user_id FROM tokens WHERE user_id IS NOT NULL")
    for row in cursor.fetchall():
        chat_ids.append(row[0])
    # –ü–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º: —Å–∏–≥–Ω–∞–ª —Å–ø–æ—Ç + —Å–∏–≥–Ω–∞–ª —Ñ—å—é—á–∏ (–ª—É—á—à–∏–π)
    for chat_id in chat_ids:
        # –°–ø–æ—Ç
        try:
            pairs = spot_exchange.load_markets()
            spot_pairs = [s for s in pairs if "/USDT" in s and not pairs[s]['future'] and pairs[s]['active'] and pairs[s]['quote'] == "USDT"]
            spot_pairs = sorted(spot_pairs, key=lambda x: -pairs[x]['info'].get('quoteVolume', 0))[:20]
            best_signal = None
            best_score = -999
            for pair in spot_pairs:
                try:
                    ticker = spot_exchange.fetch_ticker(pair)
                    price = ticker['last']
                    vol = get_volatility(ticker)
                    change = ticker.get('percentage', 0)
                    score = change * vol * ticker['quoteVolume']
                    if score > best_score:
                        best_score = score
                        best_signal = {
                            "pair": pair, "price": price, "change": change, "vol": vol, "score": score
                        }
                except: continue
            if best_signal:
                news = fetch_news()
                text = (
                    f"‚è∞ <b>–ï–∂–µ—á–∞—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å–ø–æ—Ç (Binance)</b>\n"
                    f"–ü–∞—Ä–∞: <b>{best_signal['pair']}</b>\n"
                    f"–¶–µ–Ω–∞: <b>{best_signal['price']}</b>\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{round(best_signal['change'],2)}%</b>\n"
                    f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: <b>{round(best_signal['vol'],4)}</b>\n"
                    f"{''.join(news)}\n"
                )
                await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
        except: pass
        # –§—å—é—á–µ—Ä—Å—ã
        try:
            pairs = exchanges["Binance"].load_markets()
            fut_pairs = [p for p in pairs if "/USDT" in p and pairs[p]['future'] and pairs[p]['active'] and pairs[p]['quote'] == "USDT"]
            best_signal = None
            best_score = -999
            for pair in fut_pairs:
                try:
                    ticker = exchanges["Binance"].fetch_ticker(pair)
                    vol = get_volatility(ticker)
                    price = ticker['last']
                    change = ticker.get('percentage', 0)
                    score = abs(change) * vol * ticker['quoteVolume']
                    if score > best_score:
                        best_score = score
                        best_signal = {
                            "pair": pair, "price": price, "change": change, "vol": vol, "score": score
                        }
                except: continue
            if best_signal:
                direction = "LONG" if best_signal["change"] > 0 else "SHORT"
                stop_loss = round(best_signal["price"] * (0.98 if direction == "LONG" else 1.02), 4)
                take_profit = round(best_signal["price"] * (1.03 if direction == "LONG" else 0.97), 4)
                news = fetch_news()
                text = (
                    f"‚è∞ <b>–ï–∂–µ—á–∞—Å–Ω—ã–π –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª (Binance –§—å—é—á–µ—Ä—Å—ã)</b>\n"
                    f"–ü–∞—Ä–∞: <b>{best_signal['pair']}</b>\n"
                    f"–ü–ª–µ—á–æ: <b>{FUTURES_LEVERAGE}x</b>\n"
                    f"–í—Ö–æ–¥: <b>{best_signal['price']}</b>\n"
                    f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: <b>{take_profit}</b>\n"
                    f"–°—Ç–æ–ø-–ª–æ—Å—Å: <b>{stop_loss}</b>\n"
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction}</b>\n"
                    f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: <b>{round(best_signal['vol'],4)}</b>\n"
                    f"{''.join(news)}\n"
                )
                await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
        except: pass

# ================= –ì–õ–ê–í–ù–´–ô MAIN =================
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate_token", generate_token))
    application.add_handler(CommandHandler("activate", activate_token))
    application.add_handler(CallbackQueryHandler(button_handler))
    # –ï–∂–µ—á–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    application.job_queue.run_repeating(hourly_signals_job, interval=3600, first=15)
    application.run_polling()

if __name__ == "__main__":
    main()
